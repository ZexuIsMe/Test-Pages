<div id="music-player" class="px-6 py-4">
    <div class="d-flex v-full">
        <div class="v-full d-flex align-center gap-4" style="max-width: 310px">
            <div id="music-avatar" style="position: relative">
                <figure>
                    <img src="/img/bhcyl/bhcyl.jpg" alt="" style="height: 100%; object-fit: cover">
                </figure>
                <div class="v-absolute-center bg-white" style="height: 32px; border-radius: 50%; width: 32px"></div>
                <div class="v-absolute-center border-grey-50" style="height: 40px; border-radius: 50%; width: 40px; border: 2px solid"></div>
            </div>
            <div style="width: 200px">
                <div id="music-title" class="text-secondary">歌曲名</div>
                <div id="music-author" class="text-secondary">作者</div>
            </div>
        </div>

        <div id="music-state" class="v-full d-flex flex-column justify-center align-center gap-5">
            <div class="d-flex gap-6">
                <i id="prev-btn" class="fas fa-step-backward" onclick="musicPlayer.onclickPreMusic(event)"></i>
                <i id="play-btn" class="fas fa-play-circle" onclick="musicPlayer.onclickTogglePlayerState()"></i>
                <i id="next-btn" class="fas fa-step-forward" onclick="musicPlayer.onclickNextMusic(event)"></i>
            </div>
            <div id="music-progress" class="d-flex justify-center" >
                <div onclick="musicPlayer.onclickPosition(event)">
                    <div id="default-progress" class="bg-grey-300"></div>
                    <div id="player-progress"></div>
                    <div class="progress-text"></div>
                    <audio
                            style="display: none"
                            controls
                            src="/music/净坛遗恨.mp3"
                            onloadedmetadata="musicPlayer.onloadedmetadata(event)"
                            ontimeupdate="musicPlayer.ontimeupdate(event)"
                            onended="musicPlayer.onended()"
                    ></audio>
                </div>
            </div>
        </div>

        <div class="v-full d-flex align-center justify-around" style="max-width: 310px">
            <div class="d-flex gap-3 align-center">
                <!-- 喇叭 -->
                <i
                        id="la-ba"
                        class="fas fa-volume-down text-secondary"
                        onclick="musicPlayer.onclickToggleLaBaIcon(event)"
                        data-muted="false"
                ></i>
                <!-- 音量调节 -->
                <div id="voice-progress" style="position: relative">
                    <span id="voice-bg" class="bg-grey-300"></span>
                    <span id="voice-modify"></span>
                    <div id="voice-mask" class="v-absolute" onclick="musicPlayer.onclickControlVolume(event)"></div>
                </div>
            </div>
            <!-- 歌曲列表-->
            <div id="music-list">
                <i class="fas fa-list" onclick="event.stopPropagation(); musicPlayer.showMusicListCard(event)"></i>
                <div id="music-list-card" class="p-4" onclick="event.stopPropagation()" data-list="<%= JSON.stringify(theme.music_data) %>">
                    <% theme.music_data.forEach((item, index) => { %>
                        <div
                                id="music-list-<%= index %>"
                                class="d-flex align-center justify-between px-4"
                                style="height: 48px"
                                onclick="musicPlayer.onclickMusic(`<%= JSON.stringify(item) %>`, `<%= index %>`)"
                        >
                            <div class="text-secondary" style="font-size: 14px"><%= item.name %></div>
                            <div class="text-grey-500" style="font-size: 12px"><%= item.author %></div>
                        </div>
                    <% }) %>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
class MusicPlayer extends DeviceDetector {
    constructor() {
        super();
        this.musicInfo = { index: 0 }
        this.musicList = []

        this.totalTime = ''
        this.currentTime = ''
        this.progress = 0
        this.defaultVolume = 0.2 // # 默认音量为 20%
        this.cacheVolume = 0 // 暂存音量大小

        const playBtnIcon = new Map()
        playBtnIcon.set('play', 'fa-play-circle')
        playBtnIcon.set('pause', 'fa-pause-circle')
        this.playBtnIcon = playBtnIcon

        const laBaIcon = new Map()
        laBaIcon.set("小喇叭", 'fa-volume-down')
        laBaIcon.set("大喇叭", 'fa-volume-up')
        laBaIcon.set("静音", 'fa-volume-mute')
        this.laBaIcon = laBaIcon
    }

    setMusicList () {
        if (this.musicList.length > 0) return
        const dom = this.getMusicListCard()
        this.musicList = JSON.parse(dom.dataset.list)
        dom.setAttribute('data-list', [])
    }
    getAvatarDOM () {
        return document.getElementById('music-avatar')
    }
    getMusicListCard () {
        return document.getElementById("music-list-card")
    }
    modifyMusicInfo () {
        const { name, author } = this.musicInfo
        // 修改歌曲头像
        // 修改歌曲标题
        const titleDOM = document.getElementById("music-title")
        titleDOM.innerHTML = name
        // 修改歌曲作者
        const authorDOM = document.getElementById("music-author")
        authorDOM.innerHTML = author
    }
    hideMusicListCard () {
        const card = this.getMusicListCard();
        card.style.opacity = 0;
        card.style.visibility = 'hidden';
    }
    showMusicListCard () {
        const card = this.getMusicListCard();
        card.style.opacity = 1;
        card.style.visibility = 'visible';
    }
    // 播放前一首
    onclickPreMusic(event) {
        this.setMusicList()
        const { musicInfo, musicList } = this
        // * 1 是为了把字符洗掉
        let prevIndex = musicInfo.index * 1 - 1
        if (prevIndex <= 0) prevIndex = musicList.length - 1
        document.getElementById(`music-list-${prevIndex}`).click()
    }
    // 播放下一首
    onclickNextMusic(event) {
        this.setMusicList()
        const { musicInfo, musicList } = this
        // * 1 是为了把字符洗掉
        let nextIndex = musicInfo.index * 1 + 1
        if (nextIndex > musicList.length - 1) nextIndex = 0
        document.getElementById(`music-list-${nextIndex}`).click()
    }

    // 获取 audio 图标
    getVoiceDOM () {
        return document.querySelector("#music-progress audio");
    }
    getPlayBtnDOM () {
        return document.getElementById("play-btn");
    }
    getPreBtnDOM () {
        return document.getElementById("play-btn");
    }
    getNextBtnDOM () {
        return document.getElementById("next-btn");
    }
    setMuted (dom, val) {
        dom.setAttribute('data-muted', val)
    }
    // 设置喇叭图标
    setLaBaIcon (dom, { add, remove, muted }) {
        dom.classList.remove(remove)
        dom.classList.add(add)
        this.setMuted(dom, muted)
    }
    // 设置播放键按钮图标
    setPlayBtnIcon ({ add, remove }) {
        const playBtnDOM = this.getPlayBtnDOM()
        playBtnDOM.classList.remove(remove)
        playBtnDOM.classList.add(add)
    }
    // 调整音量的位置
    modifyVolume (volume) {
        const targetDOM = document.getElementById('voice-modify')
        targetDOM.style.left = -100 + volume * 100 + '%'
    }
    // 选择音乐
    onclickMusic (val, index) {
        const config = JSON.parse(val);
        this.musicInfo = Object.assign(config, { index })
        this.setMusicList()
        this.modifyMusicInfo()

        const voiceDOM = this.getVoiceDOM()
        voiceDOM.src = `/${config.path}`

        // 切换歌曲时暂停播放
        this.getVoiceDOM().pause()
        // 切换歌曲时把播放按钮的状态还原
        const playBtnIcon = this.playBtnIcon
        this.setPlayBtnIcon({ add: playBtnIcon.get('play'), remove: playBtnIcon.get('pause') })
        this.onclickTogglePlayerState()
    }
    // 点击播放按钮时：切换音频状态
    onclickTogglePlayerState () {
        // 如果不存在歌曲信息说明是第一次播放，
        if (!Object.keys(this.musicInfo).find(key => key === 'path')) {
            document.getElementById(`music-list-0`).click()
            return
        }

        const voiceDOM = this.getVoiceDOM()
        const avatarImgDOM = this.getAvatarDOM().querySelector('img')
        // 判断是否处于播放状态，如果处于播放状态，那么 paused 参数为 false
        if (voiceDOM.paused) {
            voiceDOM.play()
            // 让音乐头像旋转起来
            avatarImgDOM.classList.add('music-avatar-img')
            this.setPlayBtnIcon({
                add: this.playBtnIcon.get('pause'),
                remove: this.playBtnIcon.get('play')
            })
        } else {
            voiceDOM.pause()
            avatarImgDOM.classList.remove('music-avatar-img')
            this.setPlayBtnIcon({
                add: this.playBtnIcon.get('play'),
                remove: this.playBtnIcon.get('pause')
            })
        }
    }
    // 调整音量大小
    onclickControlVolume (event) {
        const voice = this.getVoiceDOM()
        const { offsetX, target } = event

        const volume = offsetX/target.clientWidth
        this.modifyVolume(volume)

        const laBa = document.querySelector(`#la-ba`)
        if (laBa.dataset.muted === 'true') {
            this.setLaBaIcon(laBa, {
                muted: 'false',
                add: this.laBaIcon.get('小喇叭'),
                remove: this.laBaIcon.get('静音')
            })
        }

        voice.volume = volume
    }
    // 播放完毕
    onended () {
        // 切下一首曲子
        this.onclickNextMusic()
    }

    // 音频本身的操作
    handleTimeFormat (second) {
        // 秒数格式化
        let mm = Math.floor(second / 60)
        let ss = Math.floor(second % 60)
        if (mm < 10) mm = '0' + mm
        if (ss < 10) ss = '0' + ss
        return `${mm}:${ss}`
    }
    // 获取音频的第一手信息
    onloadedmetadata (event) {
        console.log('歌曲已填充')
        const voice = event.target
        const { duration } = voice;
        this.duration = duration;
        this.totalTime = this.handleTimeFormat(duration)
        // 设置默认音量
        voice.volume = this.defaultVolume
        // 修改音量状态
        this.modifyVolume(this.defaultVolume)
    }
    ontimeupdate (event) {
        // 当音频处于播放状态时触发
        const { currentTime, duration } = event.target
        this.currentTime = this.handleTimeFormat(currentTime)
        document.querySelector('.progress-text').innerHTML = this.currentTime
        // 操作进度条
        // 把秒数切割为100份
        const progress = currentTime / duration * 100
        document.getElementById('player-progress').style.left = -100 + progress + '%'
    }
    onclickPosition (event) {
        // TODO 定位有问题：设置currentTime会重新播放
        // 有提过 seekable，说length = 1表示可以做定位的，该音频是有的，结果嘛就是依然不能做定位
        const voiceDOM = this.getVoiceDOM()
        const paused = voiceDOM.paused

        voiceDOM.pause()
        this.setPlayBtnIcon({
            add: this.playBtnIcon.get('play'),
            remove: this.playBtnIcon.get('pause')
        })
        const { offsetX, target } = event
        voiceDOM.currentTime = Math.floor(offsetX/target.clientWidth * voiceDOM.duration)

        if (paused === false) {
            voiceDOM.play()
            this.setPlayBtnIcon({
                add: this.playBtnIcon.get('pause'),
                remove: this.playBtnIcon.get('play')
            })
        }
    }

    // 按键操作：喇叭
    onclickToggleLaBaIcon (event) {
        // 点击切换喇叭状态
        // 逻辑为：点击静音，如果是静音则回恢复状态
        // ['fa-volume-down']
        const laBaIconDOM = event.target
        const { muted } = event.target.dataset
        const laBaIcon = this.laBaIcon
        if (muted === 'false') {
            // 非静音状态，需要切换到静音
            this.setLaBaIcon(laBaIconDOM, {
                muted: 'true',
                add: laBaIcon.get('静音'),
                remove: laBaIcon.get('小喇叭')
            })
            // 把音量存起来
            this.cacheVolume = this.getVoiceDOM().volume
            // 修改音量
            this.modifyVolume(0)
            this.getVoiceDOM().volume = 0
        } else {
            // 静音状态，需要切换到正常状态
            this.setLaBaIcon(laBaIconDOM, {
                muted: 'false',
                add: laBaIcon.get('小喇叭'),
                remove: laBaIcon.get('静音')
            })
            // 修改音量
            this.modifyVolume(this.cacheVolume)
            this.getVoiceDOM().volume = this.cacheVolume
        }
    }
}
const musicPlayer = new MusicPlayer();
if (musicPlayer.isMobile()) {
    const dom = document.getElementById('music-player')
    dom.style.display = 'none'
}

window.addEventListener('click', () => {
    const target = musicPlayer.getMusicListCard()
    if (target?.style.opacity) {
        musicPlayer.hideMusicListCard()
    }
});
</script>

<style>
    #music-player {
        position: fixed;
        width: 100%;
        height: 128px;
        bottom: 0;
        left: -100%;
        z-index: 9;
        backdrop-filter: blur(10px);
        background: transparent;
        transition: left 0.5s ease;
    }
    #music-player i { font-size: 32px; }

    #music-avatar {
        width: 96px;
        height: 100%;
        border-radius:50%;
        overflow: hidden;
    }
    @keyframes avatar-rotate {
        0% { transform: rotate(0) }
        100% { transform: rotate(360deg); }
    }

    /* 按键区：上一首、播放、下一首 */
    #music-state>div:first-child>i {
        cursor: pointer;
        color: var(--secondary);
        transform: scale(1);
        transition: color 0.3s ease;
    }
    #music-state>div:first-child>i:hover {
        color: var(--primary);
    }

    /* 进度条 */
    #music-progress {
        width: 100%;
    }
    #music-progress>div {
        width: 80%;
        margin: auto;
        max-width: 500px;
        position: relative;
        overflow: hidden;
    }
    #default-progress, #player-progress {
        border: 6px;
        width: 100%;
        height: 5px;
    }
    #player-progress {
        background: linear-gradient(to left, #c1d5d3, var(--primary), #c1d5d3);
        position: absolute;
        top: 0;
        left: -100%;
        background-size: 200%;
        animation: musicPlayerProgress 3s linear infinite;
    }
    @keyframes musicPlayerProgress {
        0% {
            background-position: -100% 0;
        }
        100% {
            background-position: 100% 0;
        }
    }

    /* 音量 */
    #voice-progress {
        overflow: hidden;
        padding: 12px 0;
    }
    #voice-progress::before {
        content: "";
        width: 100%;
        height: 10px;
        background-color: var(--primary);
    }
    #voice-bg, #voice-modify {
        display: inline-block;
        width: 100px;
        height: 5px;
        border-radius: 6px;
    }
    #voice-modify {
        /*  音量的调节  */
        position: absolute;
        top: 50%;
        left: -100%;
        background-color: var(--primary);
        transition: left 0.3s ease;
        transform: translateY(-50%);
    }
    #voice-mask {
        background-color: rgba(255,0,0,0);
        height: 100%;
        width: 100%;
        cursor: pointer;
    }

    /* 歌曲列表 */
    #music-list {
        position: relative;
    }
    #music-list-card {
        cursor: pointer;
        position: absolute;
        width: 256px;
        max-height: 512px;
        overflow: auto;
        bottom: calc(100% + .5rem);
        right: -65px;
        background-color: #00586d12;
        opacity: 0;
        visibility: hidden;
        transition: visibility 0.3s ease, opacity 0.3s ease;
    }
    #music-list-card>div:nth-child(2n-1) {
        background-color: var(--grey-100);
    }
    #music-list-card>div:nth-child(2n) {
        background-color: var(--white);
    }
    #music-list-card>div:hover {
        cursor: pointer;
        background-color: var(--grey-300);
    }
</style>