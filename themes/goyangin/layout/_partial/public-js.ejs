<!-- 这里的是全局通用的方法 -->

<script type="text/javascript">
    // // 使用示例
    // const detector = new DeviceDetector();
    // console.log('是否是移动设备:', detector.isMobile());
    // console.log('是否是平板:', detector.isTablet());
    // console.log('是否是触摸屏设备:', detector.isTouchDevice());
    // console.log('浏览器:', detector.getBrowserInfo());
    // console.log('设备信息:', detector.getDeviceInfo());
    class DeviceDetector {
        constructor() {
            this.userAgent = navigator.userAgent.toLowerCase();
            this.platform = navigator.platform.toLowerCase();
            this.isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
        }

        // 判断是否为移动设备（包括平板）
        isMobile() {
            return /mobile|android|iphone|ipad|ipod|blackberry|windows phone/i.test(this.userAgent);
        }

        // 判断是否为桌面设备
        isDesktop() {
            return !this.isMobile();
        }

        // 判断是否为iOS设备
        isIOS() {
            return /iphone|ipad|ipod/i.test(this.userAgent);
        }

        // 判断是否为Android设备
        isAndroid() {
            return /android/i.test(this.userAgent);
        }

        // 判断是否为平板设备
        isTablet() {
            return /tablet|ipad|android(?!.*mobile)|kindle/i.test(this.userAgent);
        }

        // 判断是否为手机设备
        isPhone() {
            return this.isMobile() && !this.isTablet();
        }

        // 判断是否为触摸屏设备
        isTouchDevice() {
            return this.isTouchDevice;
        }

        // 判断是否为Chrome浏览器
        isChrome() {
            return /chrome/i.test(this.userAgent) && !this.isEdge();
        }

        // 判断是否为Firefox浏览器
        isFirefox() {
            return /firefox/i.test(this.userAgent);
        }

        // 判断是否为Safari浏览器
        isSafari() {
            return /safari/i.test(this.userAgent) && !/chrome|chromium/i.test(this.userAgent);
        }

        // 判断是否为Edge浏览器
        isEdge() {
            return /edge|edg/i.test(this.userAgent);
        }

        // 判断是否为IE浏览器
        isIE() {
            return /msie|trident/i.test(this.userAgent);
        }

        // 获取设备信息摘要
        getDeviceInfo() {
            return {
                userAgent: this.userAgent,
                isMobile: this.isMobile(),
                isDesktop: this.isDesktop(),
                isIOS: this.isIOS(),
                isAndroid: this.isAndroid(),
                isTablet: this.isTablet(),
                isPhone: this.isPhone(),
                isTouchDevice: this.isTouchDevice,
                browser: this.getBrowserInfo()
            };
        }

        // 获取浏览器信息
        getBrowserInfo() {
            if (this.isChrome()) return 'Chrome';
            if (this.isFirefox()) return 'Firefox';
            if (this.isSafari()) return 'Safari';
            if (this.isEdge()) return 'Edge';
            if (this.isIE()) return 'Internet Explorer';
            return 'Unknown';
        }
    }

    class Blog extends DeviceDetector {
        constructor() {
            super();
            this.messageMap = new Map();
            this.messageMap.set("info", "has-background-info-light");
            this.messageMap.set("success", "has-background-success-light");
            this.messageMap.set("warning", "has-background-warning-light");
            this.messageMap.set("error", "has-background-danger-light");
        }

        createALink (url, target = '_self') {
            if (!url) {
                console.error('没有链接')
                return
            }
            if (url.startsWith('http')) target = '_blank'
            const aLink = document.createElement('a')
            aLink.href = url
            aLink.target = target;
            aLink.click()
        }

        /**
         *
         * @param url 图片链接
         * @param id 你给 loading.ejs 添加的 id
         */
        imagesHideLoading (url, id) {
            const img = new Image()
            img.src = url
            document.getElementById(id).classList.add('c-show-loading')
            img.onload = () => {
                console.log('加载完毕')
                setTimeout(() => {
                    console.log('已执行')
                    document.getElementById(id).classList.remove('c-show-loading')
                    document.getElementById(id).classList.add('c-hide-loading')
                }, 2000)
            }
        }

        getMessageParent () {
            let DOMParent = document.getElementById('blog-message')
            if (!DOMParent) {
                DOMParent = document.createElement('div')
                DOMParent.id = 'blog-message'
                DOMParent.classList.add('d-flex')
                DOMParent.classList.add('align-center')
                DOMParent.classList.add('flex-column')
                Object.assign(DOMParent.style, {
                    width: '100%',
                    height: 'auto',
                    position: 'fixed',
                    top: '7.5rem',
                    left: 0,
                    zIndex: 999999999999999999,
                    transition: 'height 0.3s ease'
                })

                document.body.appendChild(DOMParent)
            }
            return DOMParent
        }

        showMessage ({
                         type = 'info', // info、success、warning、error
                         message = '还没有投放文本呢~~',
                     }) {
            const parentDOM = this.getMessageParent()

            const DOM = document.createElement('div')
            DOM.classList.add('py-2')
            DOM.classList.add('px-4')
            DOM.classList.add('box')
            DOM.classList.add(this.messageMap.get(type))
            Object.assign(DOM.style, {
                width: 'fit-content',
                opacity: '0',
                visibility: 'hidden',
                transition: 'opacity 0.3s ease, transform 0.3s ease, visibility 0.3s'
            })

            DOM.innerHTML = message
            DOM.style.opacity = '1'
            DOM.style.visibility = 'visible'
            parentDOM.appendChild(DOM)

            setTimeout(() => {
                DOM.style.opacity = '0'
                DOM.style.visibility = 'hidden'
                setTimeout(() => {
                    parentDOM.removeChild(DOM)
                }, 500)
            }, 1500)
        }

        onclickCopy (targetName) {
            const targetDOM = document.querySelector(targetName)
            if (!targetDOM) {
                throw new Error('复制的目标不存在！用的是 querySelector，可能是名字用错了呀~')
            }
            // 选中文本
            const range = document.createRange();
            range.selectNodeContents(targetDOM);
            const selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
            // 执行复制命令
            const successful = document.execCommand('copy');
            // 清理
            selection.removeAllRanges();

            if (successful) {
                this.showMessage({ type: 'success', message: '复制成功' });
            } else {
                throw new Error('复制失败')
            }
        }
    }
</script>